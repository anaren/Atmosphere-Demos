{
  "header": {
    "data": {
      "order": [
        "Globals",
        "Interval",
        "Connected",
        "Disconnected",
        "Setup"
      ],
      "Globals": {
        "close": "//END",
        "code": "\n#define NUMBER_OF_NOTES 8\n\nunsigned int notes[NUMBER_OF_NOTES];\nunsigned int numberOfReplays = 2;\nbool currentlyPlayingNotes = false;\nbool currentlySettingNotes = false;\nunsigned int currentNote = 0;\nunsigned int currentReplay = 0;\n\n",
        "name": "Globals",
        "func": "#include \"callbacks.h\""
      },
      "Interval": {
        "close": "}",
        "code": "\n    if(!currentlySettingNotes)\n    {\n        if(AIR_GPIO_Read(15))\n        {\n            currentlyPlayingNotes = true;\n        }\n    }\n\n    if(currentlyPlayingNotes)\n    {\n        AIR_POWER_SetMode(AIR_POWER_NOSLEEP);\n        \n        if(notes[currentNote] != 0)\n        {\n            BUZZER_Start(notes[currentNote]);\n        }\n        \n        else\n        {\n            BUZZER_Stop();\n        }\n        \n        currentNote = (currentNote + 1) % NUMBER_OF_NOTES;\n        \n        if(currentNote == 0)\n        {\n            currentReplay++;\n        }\n        \n        if(currentReplay >= numberOfReplays)\n        {\n            currentlyPlayingNotes = false;\n            currentReplay = 0;\n            currentNote = 0;\n            BUZZER_Stop();\n        }\n    }\n    \n    else\n    {\n        AIR_POWER_SetMode(AIR_POWER_SLEEP);\n    }\n",
        "name": "Interval",
        "func": "\nvoid interval() {"
      },
      "Connected": {
        "close": "}",
        "code": "",
        "name": "Connected",
        "func": "\nvoid connected() {"
      },
      "Disconnected": {
        "close": "}",
        "code": "",
        "name": "Disconnected",
        "func": "\nvoid disconnected() {"
      },
      "Setup": {
        "close": "}",
        "code": "\tAIR_GPIO_Init();\n\tAIR_POWER_Init();\n\tAIR_UART_Init();\n\tAIR_I2C_Init();\n\tAIR_SPI_Init();\n\tBUZZER_Init();\n\tAIR_POWER_SetMode(AIR_POWER_SLEEP);\n\t\n\tsetNotes(true);\n\tsetNextNote(1);\n\tsetNextNote(1);\n\tsetNextNote(2);\n\tsetNextNote(3);\n\t\n\tsetNextNote(3);\n\tsetNextNote(1);\n\tsetNextNote(3);\n\tsetNextNote(1);\n\tsetNotes(false);\n\t\n\tAIR_GPIO_SetMode(15, AIR_GPIO_INPUT_PULL_UP);\n\n    //playNotes(true);",
        "name": "Setup",
        "func": "\nvoid setup() {"
      }
    },
    "boardConfiguration": {
      "ble": {
        "values": {
          "localName": {
            "regex": "^[a-zA-Z0-9_.]*$",
            "name": "Local Name",
            "value": "ble_test",
            "prefix": "#define BLE_LOCAL_NAME \"",
            "input": "TextField",
            "suffix": "\""
          },
          "version": {
            "regex": "^[a-zA-Z0-9_.]*$",
            "name": "Version",
            "value": "1.00",
            "prefix": "#define BLE_VERSION \"",
            "input": "TextField",
            "suffix": "\""
          },
          "txPowerLevel": {
            "regex": "^[0-9]*$",
            "input": "TextField",
            "prefix": "#define BLE_TX_POWER_LEVEL ",
            "name": "TX Power Level (dbm)",
            "value": "4"
          },
          "pairing": {
            "regex": "^[a-zA-Z0-9_.]*$",
            "name": "Pairing",
            "value": "BLE_PAIRING_NONE",
            "prefix": "#define ",
            "input": "Combo",
            "options": [
              "BLE_PAIRING_NONE",
              "BLE_PAIRING_PASSKEY",
              "BLE_PAIRING_OOB"
            ]
          },
          "intervalFineTimer": {
            "regex": "^[0-9]*$",
            "input": "TextField",
            "prefix": "#define BLE_INTERVAL_FINE_TIMER ",
            "name": "Interval Timer Length (ms)",
            "value": "250"
          }
        },
        "name": "Bluetooth Low Energy",
        "file": "ble_config.h"
      },
      "power": {
        "name": "Power Driver",
        "file": "power_config.h",
        "values": {
          "external_osc": {
            "name": "External Oscillator",
            "input": "Combo",
            "prefix": "#define AIR_POWER_",
            "options": [
              "EXTERNAL_32KHZ_OSC",
              "INTERNAL_OSC"
            ],
            "value": "INTERNAL_OSC",
            "regex": "^[a-zA-Z0-9_.]*$"
          }
        }
      },
      "gpio": {
        "name": "GPIO Driver",
        "file": "gpio_config.h",
        "values": {
          "buad": {
            "name": "ADC Sample Frequency",
            "input": "Combo",
            "prefix": "#define AIR_ADC_SAMPLE_FREQUENCY ",
            "options": [
              "ADC_SAMPLE_FREQUENCY_LOW",
              "ADC_SAMPLE_FREQUENCY_MEDIUM_LOW",
              "ADC_SAMPLE_FREQUENCY_MEDIUM",
              "ADC_SAMPLE_FREQUENCY_MEDIUM_HIGH",
              "ADC_SAMPLE_FREQUENCY_HIGH"
            ],
            "value": "ADC_SAMPLE_FREQUENCY_LOW",
            "regex": "^[a-zA-Z0-9_.]*$"
          }
        }
      },
      "uart": {
        "values": {
          "rtsPin": {
            "regex": "^[a-zA-Z0-9_.]*$",
            "name": "RTS Pin",
            "value": "1",
            "prefix": "#define AIR_UART_RTS_PIN ",
            "input": "Combo",
            "options": [
              "1"
            ]
          },
          "buad": {
            "regex": "^[a-zA-Z0-9_.]*$",
            "name": "Baudrate",
            "value": "AIR_UART_BAUD_115200",
            "prefix": "#define ",
            "input": "Combo",
            "options": [
              "AIR_UART_BAUD_460800",
              "AIR_UART_BAUD_230400",
              "AIR_UART_BAUD_115200",
              "AIR_UART_BAUD_57600",
              "AIR_UART_BAUD_38400",
              "AIR_UART_BAUD_19200",
              "AIR_UART_BAUD_9600"
            ]
          },
          "rxBuffer": {
            "regex": "^[0-9]*$",
            "input": "TextField",
            "prefix": "#define AIR_UART_RX_CIRCULAR_BUFFER_SIZE ",
            "name": "RX Circular Buffer size",
            "value": "128"
          },
          "txBuffer": {
            "regex": "^[0-9]*$",
            "input": "TextField",
            "prefix": "#define AIR_UART_TX_CIRCULAR_BUFFER_SIZE ",
            "name": "TX Circular Buffer size",
            "value": "128"
          },
          "txPin": {
            "regex": "^[a-zA-Z0-9_.]*$",
            "name": "TX Pin",
            "value": "32",
            "prefix": "#define AIR_UART_TX_PIN ",
            "input": "Combo",
            "options": [
              "32"
            ]
          },
          "rxPin": {
            "regex": "^[a-zA-Z0-9_.]*$",
            "name": "RX Pin",
            "value": "33",
            "prefix": "#define AIR_UART_RX_PIN ",
            "input": "Combo",
            "options": [
              "33"
            ]
          },
          "ctsPin": {
            "regex": "^[a-zA-Z0-9_.]*$",
            "name": "CTS Pin",
            "value": "3",
            "prefix": "#define AIR_UART_CTS_PIN ",
            "input": "Combo",
            "options": [
              "3"
            ]
          }
        },
        "name": "AIR UART Driver",
        "file": "uart_config.h"
      },
      "gpio_config": {
        "values": {
          "buad": {
            "regex": "^[a-zA-Z0-9_.]*$",
            "name": "ADC Sample Frequency",
            "value": "ADC_SAMPLE_FREQUENCY_LOW",
            "prefix": "#define AIR_ADC_SAMPLE_FREQUENCY ",
            "input": "Combo",
            "options": [
              "ADC_SAMPLE_FREQUENCY_LOW",
              "ADC_SAMPLE_FREQUENCY_MEDIUM_LOW",
              "ADC_SAMPLE_FREQUENCY_MEDIUM",
              "ADC_SAMPLE_FREQUENCY_MEDIUM_HIGH",
              "ADC_SAMPLE_FREQUENCY_HIGH"
            ]
          }
        },
        "name": "GPIO Driver",
        "file": "gpio_config.h"
      }
    },
    "meta": {
      "version": "origin/kieron",
      "layoutGrid": true,
      "layoutSnapping": true,
      "layoutSnappingSize": 15,
      "cloudLayoutGrid": false,
      "cloudLayoutSnapping": false,
      "cloudLayoutSnappingSize": 10,
      "language": "en",
      "enableTooltips": true,
      "enableAutoSave": true,
      "enableBuildSave": false,
      "description": "A programmable door bell chime.",
      "project_uuid": null,
      "tokensEnabled": false,
      "codeAssist": false,
      "highlightLine": false,
      "editorTheme": "Default",
      "editorFontSize": 12,
      "customEmbeddedElementLibraries": {},
      "theme": {
        "bg1": "#DCEBF9",
        "bg2": "#DCEBF9"
      },
      "projectType": "bcm20737",
      "name": "Door Bell"
    },
    "type": "Header",
    "currentLayoutName": "Default",
    "currentCloudLayoutName": "Default"
  },
  "layouts": {
    "Default": {
      "devicename": ".*",
      "elements": {
        "Button20": {
          "x": 457,
          "y": 52,
          "width": 76,
          "height": 166
        },
        "Button14": {
          "x": 277,
          "y": 52,
          "width": 76,
          "height": 166
        },
        "Button12": {
          "x": 187,
          "y": 52,
          "width": 76,
          "height": 166
        },
        "Button9": {
          "x": 7,
          "y": 52,
          "width": 76,
          "height": 166
        },
        "Button10": {
          "x": 97,
          "y": 52,
          "width": 76,
          "height": 166
        },
        "Button11": {
          "x": 157,
          "y": 52,
          "width": 31,
          "height": 121
        },
        "Button13": {
          "x": 247,
          "y": 52,
          "width": 31,
          "height": 121
        },
        "Button15": {
          "x": 367,
          "y": 52,
          "width": 76,
          "height": 166
        },
        "Button16": {
          "x": 427,
          "y": 52,
          "width": 31,
          "height": 121
        },
        "ButtonSetSong": {
          "x": 7,
          "y": 232,
          "width": 166,
          "height": 31
        },
        "ButtonPlaySong": {
          "x": 367,
          "y": 232,
          "width": 166,
          "height": 31
        }
      },
      "orientation": "portrait",
      "platform": "",
      "height": 1024,
      "width": 768,
      "version": ".*",
      "name": "Default (768x1024)"
    }
  },
  "cloudLayouts": {
    "Default": {
      "name": "Default (768x1024)",
      "width": 768,
      "height": 1024,
      "orientation": "portrait",
      "devicename": ".*",
      "platform": "",
      "version": ".*",
      "elements": {}
    }
  },
  "elements": {
    "Button20": {
      "type": "Button",
      "properties": {
        "pressedTopColor": "rgb(255, 255, 255)",
        "disabledTopColor": "rgb(211, 211, 211)",
        "overTopColor": "rgb(234, 234, 234)",
        "overBottomColor": "rgb(214, 214, 214)",
        "enabled": false,
        "disabledBottomColor": "rgb(211, 211, 211)",
        "label": "G",
        "visible": true,
        "pressedBottomColor": "rgb(255, 255, 255)",
        "topColor": "rgb(250, 250, 250)",
        "border": "plain",
        "bottomColor": "rgb(234, 234, 234)",
        "elementType": "element"
      },
      "triggers": {
        "mousePressed": [
          {
            "sourceValue": "Static",
            "targetName": "setNextNote",
            "arguments": {
              "targetOrder": [
                "value"
              ],
              "mapping": {
                "value": "9"
              },
              "sourceOrder": []
            },
            "sourceStaticValue": "",
            "targetValue": "execute",
            "sourceTrigger": "mousePressed"
          },
          {
            "sourceValue": "Static",
            "targetName": "setNextNote",
            "arguments": {
              "targetOrder": [],
              "mapping": {},
              "sourceOrder": []
            },
            "sourceStaticValue": "",
            "targetValue": "trigger",
            "sourceTrigger": "mousePressed"
          }
        ]
      },
      "zindex": 1,
      "designer": {
        "x": 308,
        "y": 528
      }
    },
    "Button14": {
      "type": "Button",
      "properties": {
        "pressedTopColor": "rgb(255, 255, 255)",
        "disabledTopColor": "rgb(211, 211, 211)",
        "overTopColor": "rgb(234, 234, 234)",
        "overBottomColor": "rgb(214, 214, 214)",
        "enabled": false,
        "disabledBottomColor": "rgb(211, 211, 211)",
        "label": "E",
        "visible": true,
        "pressedBottomColor": "rgb(255, 255, 255)",
        "topColor": "rgb(250, 250, 250)",
        "border": "plain",
        "bottomColor": "rgb(234, 234, 234)",
        "elementType": "element"
      },
      "triggers": {
        "mousePressed": [
          {
            "sourceValue": "Static",
            "targetName": "setNextNote",
            "arguments": {
              "targetOrder": [
                "value"
              ],
              "mapping": {
                "value": "6"
              },
              "sourceOrder": []
            },
            "sourceStaticValue": "",
            "targetValue": "execute",
            "sourceTrigger": "mousePressed"
          },
          {
            "sourceValue": "Static",
            "targetName": "setNextNote",
            "arguments": {
              "targetOrder": [],
              "mapping": {},
              "sourceOrder": []
            },
            "sourceStaticValue": "",
            "targetValue": "trigger",
            "sourceTrigger": "mousePressed"
          }
        ]
      },
      "zindex": 2,
      "designer": {
        "x": 310,
        "y": 334
      }
    },
    "Button12": {
      "type": "Button",
      "properties": {
        "pressedTopColor": "rgb(255, 255, 255)",
        "disabledTopColor": "rgb(211, 211, 211)",
        "overTopColor": "rgb(234, 234, 234)",
        "overBottomColor": "rgb(214, 214, 214)",
        "enabled": false,
        "disabledBottomColor": "rgb(211, 211, 211)",
        "label": "D",
        "visible": true,
        "pressedBottomColor": "rgb(255, 255, 255)",
        "topColor": "rgb(250, 250, 250)",
        "border": "plain",
        "bottomColor": "rgb(234, 234, 234)",
        "elementType": "element"
      },
      "triggers": {
        "mousePressed": [
          {
            "sourceValue": "Static",
            "targetName": "setNextNote",
            "arguments": {
              "targetOrder": [
                "value"
              ],
              "mapping": {
                "value": "4"
              },
              "sourceOrder": []
            },
            "sourceStaticValue": "",
            "targetValue": "execute",
            "sourceTrigger": "mousePressed"
          },
          {
            "sourceValue": "Static",
            "targetName": "setNextNote",
            "arguments": {
              "targetOrder": [],
              "mapping": {},
              "sourceOrder": []
            },
            "sourceStaticValue": "",
            "targetValue": "trigger",
            "sourceTrigger": "mousePressed"
          }
        ]
      },
      "zindex": 3,
      "designer": {
        "x": 313,
        "y": 212
      }
    },
    "setNotes": {
      "type": "Function",
      "properties": {
        "returnType": "bool",
        "length": "128",
        "code": "    currentlyPlayingNotes = false;\n    currentlySettingNotes = data;\n\tcurrentNote = 0;\n\tcurrentReplay = 0;\n\treturn data;\n\t",
        "inputType": "bool",
        "permission": "public",
        "elementType": "element"
      },
      "triggers": {
        "valueReturned": [
          {
            "sourceValue": "getValue",
            "targetName": "Expression22",
            "arguments": {
              "targetOrder": [
                "key",
                "value"
              ],
              "mapping": {
                "value": "value",
                "key": "\"toggle\""
              },
              "sourceOrder": [
                "value"
              ]
            },
            "sourceStaticValue": "",
            "targetValue": "addValue",
            "sourceTrigger": "valueReturned"
          },
          {
            "sourceValue": "getValue",
            "targetName": "Expression22",
            "arguments": {
              "targetOrder": [
                "values"
              ],
              "mapping": {
                "values": "value"
              },
              "sourceOrder": [
                "value"
              ]
            },
            "sourceStaticValue": "",
            "targetValue": "evaluate",
            "sourceTrigger": "valueReturned"
          }
        ]
      },
      "zindex": 4,
      "designer": {
        "x": 0,
        "y": 292
      }
    },
    "setNextNote": {
      "type": "Function",
      "properties": {
        "returnType": "bool",
        "length": "128",
        "code": "    \n    \n    if(currentlySettingNotes) {\n        unsigned int nextNoteValue = 0;\n        \n        switch(data) {\n            case 1:\n                nextNoteValue = BUZZER_Note_B6;\n                break;\n                \n            case 2:\n                nextNoteValue = BUZZER_Note_C7;\n                break;\n                \n            case 3:\n                nextNoteValue = BUZZER_Note_CsDf7;\n                break;\n                \n            case 4:\n                nextNoteValue = BUZZER_Note_D7;\n                break;\n                \n            case 5:\n                nextNoteValue = BUZZER_Note_DsEf7;\n                break;\n                \n            case 6:\n                nextNoteValue = BUZZER_Note_E7;\n                break;\n                \n            case 7:\n                nextNoteValue = BUZZER_Note_F7;\n                break;\n                \n            case 8:\n                nextNoteValue = BUZZER_Note_FsGf7;\n                break;\n                \n            case 9:\n                nextNoteValue = BUZZER_Note_G7;\n                break;\n                \n            case 10:\n                nextNoteValue = BUZZER_Note_GsAf7;\n                break;\n                \n            case 11:\n                nextNoteValue = BUZZER_Note_A7;\n                break;\n                \n            case 12:\n                nextNoteValue = BUZZER_Note_AsBf7;\n                break;\n        }\n\n        if(currentNote < NUMBER_OF_NOTES)\n        {\n            notes[currentNote] = nextNoteValue;\n            currentNote++;\n            \n            if(currentNote == NUMBER_OF_NOTES)\n            {\n                currentlySettingNotes = false;\n                return false;\n            }\n            \n            else\n            {\n                return true;\n            }\n        }\n        \n        else\n        {\n            currentlySettingNotes = false;\n            return false;\n        }\n    }\n\t\n\t\n\t\n\treturn false;\n\t",
        "inputType": "int",
        "permission": "public",
        "elementType": "element"
      },
      "triggers": {
        "valueReturned": [
          {
            "sourceValue": "getValue",
            "targetName": "Expression22",
            "arguments": {
              "targetOrder": [
                "key",
                "value"
              ],
              "mapping": {
                "value": "value",
                "key": "\"toggle\""
              },
              "sourceOrder": [
                "value"
              ]
            },
            "sourceStaticValue": "",
            "targetValue": "addValue",
            "sourceTrigger": "valueReturned"
          },
          {
            "sourceValue": "Static",
            "targetName": "Expression22",
            "arguments": {
              "targetOrder": [
                "values"
              ],
              "mapping": {
                "values": ""
              },
              "sourceOrder": []
            },
            "sourceStaticValue": "",
            "targetValue": "evaluate",
            "sourceTrigger": "valueReturned"
          }
        ],
        "onTrigger": [
          {
            "sourceValue": "Static",
            "targetName": "Expression22",
            "arguments": {
              "targetOrder": [
                "key",
                "value"
              ],
              "mapping": {
                "value": "false",
                "key": "\"toggle\""
              },
              "sourceOrder": []
            },
            "sourceStaticValue": "",
            "targetValue": "addValue",
            "sourceTrigger": "onTrigger"
          },
          {
            "sourceValue": "Static",
            "targetName": "Expression22",
            "arguments": {
              "targetOrder": [
                "values"
              ],
              "mapping": {
                "values": ""
              },
              "sourceOrder": []
            },
            "sourceStaticValue": "",
            "targetValue": "evaluate",
            "sourceTrigger": "onTrigger"
          }
        ]
      },
      "zindex": 5,
      "designer": {
        "x": 622,
        "y": 251
      }
    },
    "playNotes": {
      "type": "Function",
      "properties": {
        "returnType": "bool",
        "length": "128",
        "code": "\n\tcurrentlyPlayingNotes = data;\n\tcurrentlySettingNotes = false;\n\tcurrentNote = 0;\n\tcurrentReplay = 0;\n\treturn false;\n\t",
        "inputType": "bool",
        "permission": "public",
        "elementType": "element"
      },
      "triggers": {
        "valueReturned": [
          {
            "sourceValue": "getValue",
            "targetName": "Expression22",
            "arguments": {
              "targetOrder": [
                "key",
                "value"
              ],
              "mapping": {
                "value": "value",
                "key": "\"toggle\""
              },
              "sourceOrder": [
                "value"
              ]
            },
            "sourceStaticValue": "",
            "targetValue": "addValue",
            "sourceTrigger": "valueReturned"
          },
          {
            "sourceValue": "getValue",
            "targetName": "Expression22",
            "arguments": {
              "targetOrder": [
                "values"
              ],
              "mapping": {
                "values": "value"
              },
              "sourceOrder": [
                "value"
              ]
            },
            "sourceStaticValue": "",
            "targetValue": "evaluate",
            "sourceTrigger": "valueReturned"
          }
        ]
      },
      "zindex": 6,
      "designer": {
        "x": 132,
        "y": 398
      }
    },
    "Button9": {
      "type": "Button",
      "properties": {
        "pressedTopColor": "rgb(255, 255, 255)",
        "disabledTopColor": "rgb(211, 211, 211)",
        "overTopColor": "rgb(234, 234, 234)",
        "overBottomColor": "rgb(214, 214, 214)",
        "enabled": false,
        "disabledBottomColor": "rgb(211, 211, 211)",
        "label": "B",
        "visible": true,
        "pressedBottomColor": "rgb(255, 255, 255)",
        "topColor": "rgb(250, 250, 250)",
        "border": "plain",
        "bottomColor": "rgb(234, 234, 234)",
        "elementType": "element"
      },
      "triggers": {
        "mousePressed": [
          {
            "sourceValue": "Static",
            "targetName": "setNextNote",
            "arguments": {
              "targetOrder": [
                "value"
              ],
              "mapping": {
                "value": "1"
              },
              "sourceOrder": []
            },
            "sourceStaticValue": "",
            "targetValue": "execute",
            "sourceTrigger": "mousePressed"
          },
          {
            "sourceValue": "Static",
            "targetName": "setNextNote",
            "arguments": {
              "targetOrder": [],
              "mapping": {},
              "sourceOrder": []
            },
            "sourceStaticValue": "",
            "targetValue": "trigger",
            "sourceTrigger": "mousePressed"
          }
        ]
      },
      "zindex": 7,
      "designer": {
        "x": 312,
        "y": 15
      }
    },
    "Button10": {
      "type": "Button",
      "properties": {
        "pressedTopColor": "rgb(255, 255, 255)",
        "disabledTopColor": "rgb(211, 211, 211)",
        "overTopColor": "rgb(234, 234, 234)",
        "overBottomColor": "rgb(214, 214, 214)",
        "enabled": false,
        "disabledBottomColor": "rgb(211, 211, 211)",
        "label": "C",
        "visible": true,
        "pressedBottomColor": "rgb(255, 255, 255)",
        "topColor": "rgb(250, 250, 250)",
        "border": "plain",
        "bottomColor": "rgb(234, 234, 234)",
        "elementType": "element"
      },
      "triggers": {
        "mousePressed": [
          {
            "sourceValue": "Static",
            "targetName": "setNextNote",
            "arguments": {
              "targetOrder": [
                "value"
              ],
              "mapping": {
                "value": "2"
              },
              "sourceOrder": []
            },
            "sourceStaticValue": "",
            "targetValue": "execute",
            "sourceTrigger": "mousePressed"
          },
          {
            "sourceValue": "Static",
            "targetName": "setNextNote",
            "arguments": {
              "targetOrder": [],
              "mapping": {},
              "sourceOrder": []
            },
            "sourceStaticValue": "",
            "targetValue": "trigger",
            "sourceTrigger": "mousePressed"
          }
        ]
      },
      "zindex": 8,
      "designer": {
        "x": 311,
        "y": 84
      }
    },
    "Button11": {
      "type": "Button",
      "properties": {
        "pressedTopColor": "rgb(255, 255, 255)",
        "disabledTopColor": "rgb(211, 211, 211)",
        "overTopColor": "rgb(234, 234, 234)",
        "overBottomColor": "rgb(214, 214, 214)",
        "enabled": false,
        "disabledBottomColor": "rgb(211, 211, 211)",
        "label": "C#",
        "visible": true,
        "pressedBottomColor": "rgb(255, 255, 255)",
        "topColor": "rgb(250, 250, 250)",
        "border": "plain",
        "bottomColor": "rgb(234, 234, 234)",
        "elementType": "element"
      },
      "triggers": {
        "mousePressed": [
          {
            "sourceValue": "Static",
            "targetName": "setNextNote",
            "arguments": {
              "targetOrder": [
                "value"
              ],
              "mapping": {
                "value": "3"
              },
              "sourceOrder": []
            },
            "sourceStaticValue": "",
            "targetValue": "execute",
            "sourceTrigger": "mousePressed"
          },
          {
            "sourceValue": "Static",
            "targetName": "setNextNote",
            "arguments": {
              "targetOrder": [],
              "mapping": {},
              "sourceOrder": []
            },
            "sourceStaticValue": "",
            "targetValue": "trigger",
            "sourceTrigger": "mousePressed"
          }
        ]
      },
      "zindex": 9,
      "designer": {
        "x": 315,
        "y": 144
      }
    },
    "Button13": {
      "type": "Button",
      "properties": {
        "pressedTopColor": "rgb(255, 255, 255)",
        "disabledTopColor": "rgb(211, 211, 211)",
        "overTopColor": "rgb(234, 234, 234)",
        "overBottomColor": "rgb(214, 214, 214)",
        "enabled": false,
        "disabledBottomColor": "rgb(211, 211, 211)",
        "label": "D#",
        "visible": true,
        "pressedBottomColor": "rgb(255, 255, 255)",
        "topColor": "rgb(250, 250, 250)",
        "border": "plain",
        "bottomColor": "rgb(234, 234, 234)",
        "elementType": "element"
      },
      "triggers": {
        "mousePressed": [
          {
            "sourceValue": "Static",
            "targetName": "setNextNote",
            "arguments": {
              "targetOrder": [
                "value"
              ],
              "mapping": {
                "value": "5"
              },
              "sourceOrder": []
            },
            "sourceStaticValue": "",
            "targetValue": "execute",
            "sourceTrigger": "mousePressed"
          },
          {
            "sourceValue": "Static",
            "targetName": "setNextNote",
            "arguments": {
              "targetOrder": [],
              "mapping": {},
              "sourceOrder": []
            },
            "sourceStaticValue": "",
            "targetValue": "trigger",
            "sourceTrigger": "mousePressed"
          }
        ]
      },
      "zindex": 10,
      "designer": {
        "x": 317,
        "y": 271
      }
    },
    "Button15": {
      "type": "Button",
      "properties": {
        "pressedTopColor": "rgb(255, 255, 255)",
        "disabledTopColor": "rgb(211, 211, 211)",
        "overTopColor": "rgb(234, 234, 234)",
        "overBottomColor": "rgb(214, 214, 214)",
        "enabled": false,
        "disabledBottomColor": "rgb(211, 211, 211)",
        "label": "F",
        "visible": true,
        "pressedBottomColor": "rgb(255, 255, 255)",
        "topColor": "rgb(250, 250, 250)",
        "border": "plain",
        "bottomColor": "rgb(234, 234, 234)",
        "elementType": "element"
      },
      "triggers": {
        "mousePressed": [
          {
            "sourceValue": "Static",
            "targetName": "setNextNote",
            "arguments": {
              "targetOrder": [
                "value"
              ],
              "mapping": {
                "value": "7"
              },
              "sourceOrder": []
            },
            "sourceStaticValue": "",
            "targetValue": "execute",
            "sourceTrigger": "mousePressed"
          },
          {
            "sourceValue": "Static",
            "targetName": "setNextNote",
            "arguments": {
              "targetOrder": [],
              "mapping": {},
              "sourceOrder": []
            },
            "sourceStaticValue": "",
            "targetValue": "trigger",
            "sourceTrigger": "mousePressed"
          }
        ]
      },
      "zindex": 11,
      "designer": {
        "x": 310,
        "y": 397
      }
    },
    "Button16": {
      "type": "Button",
      "properties": {
        "pressedTopColor": "rgb(255, 255, 255)",
        "disabledTopColor": "rgb(211, 211, 211)",
        "overTopColor": "rgb(234, 234, 234)",
        "overBottomColor": "rgb(214, 214, 214)",
        "enabled": false,
        "disabledBottomColor": "rgb(211, 211, 211)",
        "label": "F#",
        "visible": true,
        "pressedBottomColor": "rgb(255, 255, 255)",
        "topColor": "rgb(250, 250, 250)",
        "border": "plain",
        "bottomColor": "rgb(234, 234, 234)",
        "elementType": "element"
      },
      "triggers": {
        "mousePressed": [
          {
            "sourceValue": "Static",
            "targetName": "setNextNote",
            "arguments": {
              "targetOrder": [
                "value"
              ],
              "mapping": {
                "value": "8"
              },
              "sourceOrder": []
            },
            "sourceStaticValue": "",
            "targetValue": "execute",
            "sourceTrigger": "mousePressed"
          },
          {
            "sourceValue": "Static",
            "targetName": "setNextNote",
            "arguments": {
              "targetOrder": [],
              "mapping": {},
              "sourceOrder": []
            },
            "sourceStaticValue": "",
            "targetValue": "trigger",
            "sourceTrigger": "mousePressed"
          }
        ]
      },
      "zindex": 12,
      "designer": {
        "x": 311,
        "y": 462
      }
    },
    "ButtonSetSong": {
      "type": "Button",
      "properties": {
        "pressedTopColor": "rgb(255, 255, 255)",
        "disabledTopColor": "rgb(211, 211, 211)",
        "overTopColor": "rgb(234, 234, 234)",
        "overBottomColor": "rgb(214, 214, 214)",
        "enabled": true,
        "disabledBottomColor": "rgb(211, 211, 211)",
        "label": "Set Song",
        "visible": true,
        "pressedBottomColor": "rgb(255, 255, 255)",
        "topColor": "rgb(250, 250, 250)",
        "border": "plain",
        "bottomColor": "rgb(234, 234, 234)",
        "elementType": "element"
      },
      "triggers": {
        "mousePressed": [
          {
            "sourceValue": "Static",
            "targetName": "setNotes",
            "arguments": {
              "targetOrder": [
                "value"
              ],
              "mapping": {
                "value": "true"
              },
              "sourceOrder": []
            },
            "sourceStaticValue": "",
            "targetValue": "execute",
            "sourceTrigger": "mousePressed"
          }
        ]
      },
      "zindex": 13,
      "designer": {
        "x": 0,
        "y": 182
      }
    },
    "ButtonPlaySong": {
      "type": "Button",
      "properties": {
        "pressedTopColor": "rgb(255, 255, 255)",
        "disabledTopColor": "rgb(211, 211, 211)",
        "overTopColor": "rgb(234, 234, 234)",
        "overBottomColor": "rgb(214, 214, 214)",
        "enabled": true,
        "disabledBottomColor": "rgb(211, 211, 211)",
        "label": "Play Song",
        "visible": true,
        "pressedBottomColor": "rgb(255, 255, 255)",
        "topColor": "rgb(250, 250, 250)",
        "border": "plain",
        "bottomColor": "rgb(234, 234, 234)",
        "elementType": "element"
      },
      "triggers": {
        "mousePressed": [
          {
            "sourceValue": "Static",
            "targetName": "playNotes",
            "arguments": {
              "targetOrder": [
                "value"
              ],
              "mapping": {
                "value": "true"
              },
              "sourceOrder": []
            },
            "sourceStaticValue": "",
            "targetValue": "execute",
            "sourceTrigger": "mousePressed"
          }
        ]
      },
      "zindex": 14,
      "designer": {
        "x": 25,
        "y": 415
      }
    },
    "Expression22": {
      "type": "Expression",
      "properties": {
        "expression": "values.toggle",
        "elementType": "element"
      },
      "triggers": {
        "evaluated": [
          {
            "sourceValue": "getValue",
            "targetName": "Button9",
            "arguments": {
              "targetOrder": [
                "enabled"
              ],
              "mapping": {
                "enabled": "value"
              },
              "sourceOrder": [
                "value"
              ]
            },
            "sourceStaticValue": "",
            "targetValue": "setEnabled",
            "sourceTrigger": "evaluated"
          },
          {
            "sourceValue": "getValue",
            "targetName": "Button10",
            "arguments": {
              "targetOrder": [
                "enabled"
              ],
              "mapping": {
                "enabled": "value"
              },
              "sourceOrder": [
                "value"
              ]
            },
            "sourceStaticValue": "",
            "targetValue": "setEnabled",
            "sourceTrigger": "evaluated"
          },
          {
            "sourceValue": "getValue",
            "targetName": "Button11",
            "arguments": {
              "targetOrder": [
                "enabled"
              ],
              "mapping": {
                "enabled": "value"
              },
              "sourceOrder": [
                "value"
              ]
            },
            "sourceStaticValue": "",
            "targetValue": "setEnabled",
            "sourceTrigger": "evaluated"
          },
          {
            "sourceValue": "getValue",
            "targetName": "Button12",
            "arguments": {
              "targetOrder": [
                "enabled"
              ],
              "mapping": {
                "enabled": "value"
              },
              "sourceOrder": [
                "value"
              ]
            },
            "sourceStaticValue": "",
            "targetValue": "setEnabled",
            "sourceTrigger": "evaluated"
          },
          {
            "sourceValue": "getValue",
            "targetName": "Button13",
            "arguments": {
              "targetOrder": [
                "enabled"
              ],
              "mapping": {
                "enabled": "value"
              },
              "sourceOrder": [
                "value"
              ]
            },
            "sourceStaticValue": "",
            "targetValue": "setEnabled",
            "sourceTrigger": "evaluated"
          },
          {
            "sourceValue": "getValue",
            "targetName": "Button14",
            "arguments": {
              "targetOrder": [
                "enabled"
              ],
              "mapping": {
                "enabled": "value"
              },
              "sourceOrder": [
                "value"
              ]
            },
            "sourceStaticValue": "",
            "targetValue": "setEnabled",
            "sourceTrigger": "evaluated"
          },
          {
            "sourceValue": "getValue",
            "targetName": "Button15",
            "arguments": {
              "targetOrder": [
                "enabled"
              ],
              "mapping": {
                "enabled": "value"
              },
              "sourceOrder": [
                "value"
              ]
            },
            "sourceStaticValue": "",
            "targetValue": "setEnabled",
            "sourceTrigger": "evaluated"
          },
          {
            "sourceValue": "getValue",
            "targetName": "Button16",
            "arguments": {
              "targetOrder": [
                "enabled"
              ],
              "mapping": {
                "enabled": "value"
              },
              "sourceOrder": [
                "value"
              ]
            },
            "sourceStaticValue": "",
            "targetValue": "setEnabled",
            "sourceTrigger": "evaluated"
          },
          {
            "sourceValue": "getValue",
            "targetName": "Button20",
            "arguments": {
              "targetOrder": [
                "enabled"
              ],
              "mapping": {
                "enabled": "value"
              },
              "sourceOrder": [
                "value"
              ]
            },
            "sourceStaticValue": "",
            "targetValue": "setEnabled",
            "sourceTrigger": "evaluated"
          }
        ]
      },
      "zindex": 15,
      "designer": {
        "x": 121,
        "y": 279
      }
    }
  },
  "cloudElements": {}
}