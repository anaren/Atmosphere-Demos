{
  "header": {
    "data": {
      "order": [
        "Globals",
        "Interval",
        "Connected",
        "Disconnected",
        "Setup"
      ],
      "Globals": {
        "name": "Globals",
        "func": "#include \"callbacks.h\"",
        "code": "#include \"apa102/apa102.h\"\n\nvoid zooming(\n    unsigned int frame, \n    unsigned int currentColumn, \n    unsigned int currentRow, \n    unsigned int totalColumns, \n    unsigned int totalRows, \n    void *args, \n    uint8_t *brightness, \n    uint8_t *red, \n    uint8_t *green, \n    uint8_t *blue) {\n        \n    *red = 0x00 + (((currentColumn + frame) + 0xff/2) % 0xff);\n    *blue = 0xff - ((currentColumn + frame) % 0xff);\n    *green = 0x00 + ((currentColumn + frame) % 0xff);\n    *brightness = 0xff;\n\n}\n\nvoid redGreenBlueBlinking(\n    unsigned int frame, \n    unsigned int currentColumn, \n    unsigned int currentRow, \n    unsigned int totalColumns, \n    unsigned int totalRows, \n    void *args, \n    uint8_t *brightness, \n    uint8_t *red, \n    uint8_t *green, \n    uint8_t *blue) {\n        \n    *brightness = 0xff;\n    \n    if((currentColumn + frame) % 3 == 0) {\n       *red = 0xff;\n       *blue = 0x00;\n       *green = 0x00;\n    }\n    \n    else if((currentColumn + frame) % 2 == 0) {\n        *red = 0x00;\n        *blue = 0xff;\n        *green = 0x00;\n       \n    }\n    \n    else {\n        *red = 0x00;\n        *blue = 0x00;\n        *green = 0xff;\n    }\n}\n\nAIR_LEDAnimateCallback_ptr currentAnimation = &zooming;\n",
        "close": "//END"
      },
      "Interval": {
        "name": "Interval",
        "func": "\nvoid interval() {",
        "code": "    static int frame = 0;\n    \n    APA102_Animate(currentAnimation, frame, 150, 150, false, NULL);\n    \n    frame = (frame + 1) % 0xff;",
        "close": "}"
      },
      "Connected": {
        "name": "Connected",
        "func": "\nvoid connected() {",
        "code": "   ",
        "close": "}"
      },
      "Disconnected": {
        "name": "Disconnected",
        "func": "\nvoid disconnected() {",
        "code": "",
        "close": "}"
      },
      "Setup": {
        "name": "Setup",
        "func": "\nvoid setup() {",
        "code": "\tAIR_GPIO_Init();\n\tAIR_POWER_Init();\n\tAIR_UART_Init();\n\tAIR_I2C_Init();\n\tAIR_SPI_Init();\n\tAIR_POWER_SetMode(AIR_POWER_NOSLEEP);",
        "close": "}"
      }
    },
    "boardConfiguration": {
      "ble": {
        "name": "Bluetooth Low Energy",
        "file": "ble_config.h",
        "values": {
          "localName": {
            "name": "Local Name",
            "input": "TextField",
            "prefix": "#define BLE_LOCAL_NAME \"",
            "value": "ble_test",
            "suffix": "\"",
            "regex": "^[a-zA-Z0-9_.]*$"
          },
          "version": {
            "name": "Version",
            "input": "TextField",
            "prefix": "#define BLE_VERSION \"",
            "value": "1.00",
            "suffix": "\"",
            "regex": "^[a-zA-Z0-9_.]*$"
          },
          "ota": {
            "name": "Over the Air Updating (Default: OTA)",
            "input": "Combo",
            "prefix": "#define BLE_",
            "options": [
              "OTA",
              "NO_OTA"
            ],
            "value": "OTA",
            "regex": "^[a-zA-Z0-9_.]*$"
          },
          "pairing": {
            "name": "Pairing (Default: NONE)",
            "input": "Combo",
            "prefix": "#define ",
            "options": [
              "BLE_PAIRING_NONE",
              "BLE_PAIRING_PASSKEY"
            ],
            "value": "BLE_PAIRING_NONE",
            "regex": "^[a-zA-Z0-9_.]*$"
          },
          "txPowerLevel": {
            "name": "TX Power Level (dbm) (Default: 4)",
            "input": "TextField",
            "prefix": "#define BLE_TX_POWER_LEVEL ",
            "value": "4",
            "regex": "^-?[0-9]d{0,2}(.d*)?$"
          },
          "advPowerLevel": {
            "name": "Advertising TX Power Level (dbm) (Default: 4)",
            "input": "TextField",
            "prefix": "#define ADV_BLE_TX_POWER_LEVEL ",
            "value": "4",
            "regex": "^-?[0-9]d{0,2}(.d*)?$"
          },
          "intervalFineTimer": {
            "name": "Interval Timer Length (ms) (Default: 1000)",
            "input": "Combo",
            "prefix": "#define BLE_INTERVAL_FINE_TIMER ",
            "options": [
              "12.5",
              "25",
              "50",
              "62.5",
              "75",
              "87.5",
              "100",
              "125",
              "137.5",
              "162.5",
              "200",
              "250",
              "325",
              "500",
              "1000"
            ],
            "value": "50",
            "regex": "^[a-zA-Z0-9_.]*$"
          },
          "minInterval": {
            "name": "BLE Min Interval (ms) (Default: 20)",
            "input": "TextField",
            "prefix": "#define BLE_INTERVAL_MIN ",
            "value": "20",
            "regex": "^[0-9]*$"
          },
          "maxInterval": {
            "name": "BLE Max Interval (ms) (Default: 40)",
            "input": "TextField",
            "prefix": "#define BLE_INTERVAL_MAX ",
            "value": "40",
            "regex": "^[0-9]*$"
          },
          "slaveLatency": {
            "name": "BLE Slave Latency (ms) (Default: 0)",
            "input": "TextField",
            "prefix": "#define BLE_SLAVE_LATENCY ",
            "value": "0",
            "regex": "^[0-9]*$"
          },
          "timeout": {
            "name": "BLE Connection Timeout (ms) (Default: 700)",
            "input": "TextField",
            "prefix": "#define BLE_CONNECTION_TIMEOUT ",
            "value": "700",
            "regex": "^[0-9]*$"
          }
        }
      },
      "power": {
        "name": "Power Driver",
        "file": "power_config.h",
        "values": {
          "external_osc": {
            "name": "External Oscillator (Default: INTERNAL)",
            "input": "Combo",
            "prefix": "#define AIR_POWER_",
            "options": [
              "EXTERNAL_32KHZ_OSC",
              "INTERNAL_OSC"
            ],
            "value": "INTERNAL_OSC",
            "regex": "^[a-zA-Z0-9_.]*$"
          }
        }
      },
      "gpio": {
        "name": "GPIO Driver",
        "file": "gpio_config.h",
        "values": {
          "buad": {
            "name": "ADC Sample Frequency (Default: LOW)",
            "input": "Combo",
            "prefix": "#define AIR_ADC_SAMPLE_FREQUENCY ",
            "options": [
              "ADC_SAMPLE_FREQUENCY_LOW",
              "ADC_SAMPLE_FREQUENCY_MEDIUM_LOW",
              "ADC_SAMPLE_FREQUENCY_MEDIUM",
              "ADC_SAMPLE_FREQUENCY_MEDIUM_HIGH",
              "ADC_SAMPLE_FREQUENCY_HIGH"
            ],
            "value": "ADC_SAMPLE_FREQUENCY_LOW",
            "regex": "^[a-zA-Z0-9_.]*$"
          },
          "pwmClockSource": {
            "name": "PWM Clock Source (Default: PMU)",
            "input": "Combo",
            "prefix": "#define AIR_PWM_CLOCK_SOURCE ",
            "options": [
              "PMU_CLK",
              "LHL_CLK"
            ],
            "value": "PMU_CLK",
            "regex": "^[a-zA-Z0-9_.]*$"
          }
        }
      },
      "uart": {
        "name": "UART Driver",
        "file": "uart_config.h",
        "values": {
          "rxBuffer": {
            "name": "RX Circular Buffer size (Default: 128)",
            "input": "TextField",
            "prefix": "#define AIR_UART_RX_CIRCULAR_BUFFER_SIZE ",
            "value": "128",
            "regex": "^[0-9]*$"
          },
          "txBuffer": {
            "name": "TX Circular Buffer size (Default: 128)",
            "input": "TextField",
            "prefix": "#define AIR_UART_TX_CIRCULAR_BUFFER_SIZE ",
            "value": "128",
            "regex": "^[0-9]*$"
          },
          "buad": {
            "name": "Baudrate (Default: 115200)",
            "input": "Combo",
            "prefix": "#define ",
            "options": [
              "AIR_UART_BAUD_460800",
              "AIR_UART_BAUD_230400",
              "AIR_UART_BAUD_115200",
              "AIR_UART_BAUD_57600",
              "AIR_UART_BAUD_38400",
              "AIR_UART_BAUD_19200",
              "AIR_UART_BAUD_9600"
            ],
            "value": "AIR_UART_BAUD_115200",
            "regex": "^[a-zA-Z0-9_.]*$"
          },
          "txPin": {
            "name": "TX Pin (Default: 32)",
            "input": "Combo",
            "prefix": "#define AIR_UART_TX_PIN ",
            "options": [
              "32"
            ],
            "value": "32",
            "regex": "^[a-zA-Z0-9_.]*$"
          },
          "rxPin": {
            "name": "RX Pin (Default: 33)",
            "input": "Combo",
            "prefix": "#define AIR_UART_RX_PIN ",
            "options": [
              "33"
            ],
            "value": "33",
            "regex": "^[a-zA-Z0-9_.]*$"
          },
          "rtsPin": {
            "name": "RTS Pin (Default: 1)",
            "input": "Combo",
            "prefix": "#define AIR_UART_RTS_PIN ",
            "options": [
              "1"
            ],
            "value": "1",
            "regex": "^[a-zA-Z0-9_.]*$"
          },
          "ctsPin": {
            "name": "CTS Pin (Default: 3)",
            "input": "Combo",
            "prefix": "#define AIR_UART_CTS_PIN ",
            "options": [
              "3"
            ],
            "value": "3",
            "regex": "^[a-zA-Z0-9_.]*$"
          }
        }
      },
      "spi": {
        "name": "SPI Driver",
        "file": "spi_config.h",
        "values": {
          "speed": {
            "name": "SPI Speed (Default: 1000000)",
            "input": "Combo",
            "prefix": "#define AIR_SPI_SPEED ",
            "options": [
              "1000000",
              "500000"
            ],
            "value": "1000000",
            "regex": "^[a-zA-Z0-9_.]*$"
          },
          "mode": {
            "name": "SPI Mode (Default: SPI_MODE_3)",
            "input": "Combo",
            "prefix": "#define AIR_SPI_MODE ",
            "options": [
              "SPI_MODE_0",
              "SPI_MODE_1",
              "SPI_MODE_2",
              "SPI_MODE_3"
            ],
            "value": "SPI_MODE_3",
            "regex": "^[a-zA-Z0-9_.]*$"
          }
        }
      },
      "buzzer": {
        "name": "Buzzer Driver",
        "file": "buzzer_config.h",
        "values": {
          "pin": {
            "name": "Buzzer Pin (Default: 14)",
            "input": "Combo",
            "prefix": "#define BUZZER_PWM_PIN ",
            "options": [
              "13",
              "14",
              "26",
              "27"
            ],
            "value": "14",
            "regex": "^[a-zA-Z0-9_.]*$"
          }
        }
      }
    },
    "meta": {
      "version": "2.0.0",
      "layoutGrid": false,
      "layoutSnapping": false,
      "layoutSnappingSize": 10,
      "cloudLayoutGrid": false,
      "cloudLayoutSnapping": false,
      "cloudLayoutSnappingSize": 10,
      "language": "en",
      "enableTooltips": true,
      "enableAutoSave": true,
      "enableBuildSave": false,
      "description": null,
      "project_uuid": null,
      "tokensEnabled": false,
      "codeAssist": false,
      "highlightLine": false,
      "editorTheme": "Default",
      "editorFontSize": 12,
      "customEmbeddedElementLibraries": {
        "apa102": {
          "author": "Anaren Inc.",
          "categories": [
            "Temperature",
            "Sensor"
          ],
          "code": {
            "connected": " \n",
            "global": "",
            "interval": " \n",
            "setup": ""
          },
          "description": "",
          "elements": {},
          "files": {
            "common": {
              "headers": {
                "apa102.h": "// Copyright (c) 2016, Anaren Inc.\r\n// All rights reserved.\r\n// \r\n// Redistribution and use in source and binary forms, with or without\r\n// modification, are permitted provided that the following conditions are met:\r\n// \r\n// 1. Redistributions of source code must retain the above copyright notice, this\r\n//    list of conditions and the following disclaimer. \r\n// 2. Redistributions in binary form must reproduce the above copyright notice,\r\n//    this list of conditions and the following disclaimer in the documentation\r\n//    and/or other materials provided with the distribution.\r\n// \r\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\n// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\r\n// ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\n// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n// \r\n// The views and conclusions contained in the software and documentation are those\r\n// of the authors and should not be interpreted as representing official policies, \r\n// either expressed or implied, of the FreeBSD Project.\r\n\r\n#ifndef APA102_H\r\n#define APA102_H\r\n\r\n#include \"../spi/spi.h\"\r\n#include \"apa102_config.h\"\r\n#include <stdint.h>\r\n\r\n#ifndef AIR_LED_ANIMATE_CALLBACK\r\n#define AIR_LED_ANIMATE_CALLBACK\r\ntypedef void (*AIR_LEDAnimateCallback_ptr)(unsigned int frame, unsigned int currentColumn, unsigned int currentRow, unsigned int totalColumns, unsigned int totalRows, void *args, uint8_t *brightness, uint8_t *red, uint8_t *green, uint8_t *blue);\r\n#endif\r\n\r\n//------------------------------------------------------------------------------\r\n/**\r\n *  Defines, enumerations, and structure definitions\r\n */\r\n// \r\n\r\n\r\nvoid APA102_WriteStartFrame();\r\n\r\nvoid APA102_WriteEndFrame();\r\n\r\nvoid APA102_WriteLEDFrame(uint8_t brightness, uint8_t red, uint8_t green, uint8_t blue);\r\n\r\nvoid APA102_Animate(AIR_LEDAnimateCallback_ptr animation, unsigned int frame, unsigned int numberOfLEDs, unsigned int numberOfLEDsPerRow, bool serpentine, void *args);\r\n\r\n#endif  /* APA102_H */\r\n"
              },
              "objects": {
                "apa102.c": "// Copyright (c) 2016, Anaren Inc.\r\n// All rights reserved.\r\n// \r\n// Redistribution and use in source and binary forms, with or without\r\n// modification, are permitted provided that the following conditions are met:\r\n// \r\n// 1. Redistributions of source code must retain the above copyright notice, this\r\n//    list of conditions and the following disclaimer. \r\n// 2. Redistributions in binary form must reproduce the above copyright notice,\r\n//    this list of conditions and the following disclaimer in the documentation\r\n//    and/or other materials provided with the distribution.\r\n// \r\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\n// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\r\n// ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\n// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n// \r\n// The views and conclusions contained in the software and documentation are those\r\n// of the authors and should not be interpreted as representing official policies, \r\n// either expressed or implied, of the FreeBSD Project.\r\n\r\n#include \"apa102.h\"\r\n#include <stddef.h>\r\n\r\nconst uint8_t startFrame[] = {0x00, 0x00, 0x00, 0x00};\r\nconst uint8_t endFrame[] = {0xff, 0xff, 0xff, 0xff};\r\n\r\nvoid APA102_WriteStartFrame()\r\n{\r\n\tAIR_SPI_Write(-1, startFrame, 4);\r\n}\r\n\r\nvoid APA102_WriteEndFrame()\r\n{\r\n\tAIR_SPI_Write(-1, endFrame, 4);\r\n}\r\n\r\nvoid APA102_WriteLEDFrame(uint8_t brightness, uint8_t red, uint8_t green, uint8_t blue)\r\n{\r\n\t//We need to scale our 8-bit brightness to the 5-bit brightness value this led takes\r\n\tbrightness = 0xe0 | ((brightness/0xff) * 0x1f);\r\n\t\r\n\t//Each frame is constructed as brightness, blue, green and red.\r\n\t//[ 3-bit all 1s][ 5-bit for brightness ][ 8-bits for blue ][ 8-bits for green ][ 8-bits for red ]\r\n\tuint8_t tempData[4];\r\n\ttempData[0] = brightness;\r\n\ttempData[1] = blue;\r\n\ttempData[2] = green;\r\n\ttempData[3] = red;\r\n\t\r\n\tAIR_SPI_Write(-1, tempData, 4);\r\n}\r\n\r\n// typedef void (*AIR_LEDAnimateCallback_ptr)(unsigned int frame, unsigned int currentColumn, unsigned int currentRow, unsigned int totalColumns, unsigned int totalRows, void *args, uint8_t *brightness, uint8_t *red, uint8_t *green, uint8_t *blue);\r\nvoid APA102_Animate(AIR_LEDAnimateCallback_ptr animation, unsigned int frame, unsigned int numberOfLEDs, unsigned int numberOfLEDsPerRow, bool serpentine, void *args)\r\n{\r\n\tif(animation == NULL) \r\n\t{\r\n\t\treturn;\r\n\t}\r\n\t\r\n\tAPA102_WriteStartFrame();\r\n\t\r\n\tunsigned int i = 0;\r\n\tunsigned int totalNumberOfRows = numberOfLEDs / numberOfLEDsPerRow;\r\n\t\r\n\tfor(i; i < numberOfLEDs; i++)\r\n\t{\r\n\t\tuint8_t tempBrightness = 0;\r\n\t\tuint8_t tempRed = 0;\r\n\t\tuint8_t tempGreen = 0;\r\n\t\tuint8_t tempBlue = 0;\r\n\t\tunsigned int currentRow = i / numberOfLEDsPerRow;\r\n\t\tunsigned int currentColumn = i % numberOfLEDsPerRow;\r\n\t\t\r\n\t\tif(serpentine && currentRow % 2)\r\n\t\t{\r\n\t\t\tcurrentColumn = numberOfLEDsPerRow - currentColumn;\r\n\t\t}\r\n\t\t\r\n\t\t(*animation)(frame, currentColumn, currentRow, numberOfLEDsPerRow, totalNumberOfRows, args, &tempBrightness, &tempRed, &tempGreen, &tempBlue);\r\n\t\tAPA102_WriteLEDFrame(tempBrightness, tempRed, tempGreen, tempBlue);\r\n\t}\r\n\t\r\n\tAPA102_WriteEndFrame();\r\n}\r\n"
              },
              "other": {
                "apa102_config.h": " \n"
              }
            }
          },
          "label": "APA102 Driver",
          "language": {
            "en": {
              "label": "APA102 Driver"
            }
          },
          "links": {
            "Datasheet": "http://",
            "Product Page": "http://",
            "Wiki Page": "https://atmosphere.anaren.com/wiki/APA102_Driver"
          },
          "manufacturer": "",
          "name": "apa102",
          "signature": "",
          "type": "Embedded Library",
          "version": "1.0.0"
        }
      },
      "theme": {},
      "projectType": "bcm20737",
      "name": "LEDS"
    },
    "type": "Header",
    "currentLayoutName": "Default",
    "currentCloudLayoutName": "Default"
  },
  "layouts": {
    "Default": {
      "name": "Default (768x1024)",
      "width": 768,
      "height": 1024,
      "orientation": "portrait",
      "devicename": ".*",
      "platform": "",
      "version": ".*",
      "elements": {
        "Button0": {
          "x": 18,
          "y": 47,
          "width": 146,
          "height": 46
        },
        "Button1": {
          "x": 20,
          "y": 126,
          "width": 146,
          "height": 46
        }
      }
    }
  },
  "cloudLayouts": {
    "Default": {
      "name": "Default (600x400)",
      "width": 600,
      "height": 400,
      "orientation": "landscape",
      "devicename": ".*",
      "platform": "",
      "version": ".*",
      "elements": {}
    }
  },
  "elements": {
    "Button0": {
      "type": "Button",
      "properties": {
        "label": "Zooming",
        "enabled": true,
        "visible": true,
        "border": "plain",
        "topColor": "rgb(250, 250, 250)",
        "bottomColor": "rgb(234, 234, 234)",
        "pressedTopColor": "rgb(255, 255, 255)",
        "pressedBottomColor": "rgb(255, 255, 255)",
        "overTopColor": "rgb(234, 234, 234)",
        "overBottomColor": "rgb(214, 214, 214)",
        "disabledTopColor": "rgb(211, 211, 211)",
        "disabledBottomColor": "rgb(211, 211, 211)",
        "airID": 0,
        "elementPanel": "designer",
        "elementType": "element"
      },
      "triggers": {
        "mousePressed": [
          {
            "sourceTrigger": "mousePressed",
            "sourceValue": "Static",
            "targetValue": "execute",
            "sourceStaticValue": "",
            "arguments": {
              "mapping": {
                "value": ""
              },
              "targetOrder": [
                "value"
              ],
              "sourceOrder": []
            },
            "targetName": "setZooming"
          }
        ]
      },
      "zindex": 0,
      "designer": {
        "x": 12,
        "y": 43
      }
    },
    "Button1": {
      "type": "Button",
      "properties": {
        "label": "Blinking",
        "enabled": true,
        "visible": true,
        "border": "plain",
        "topColor": "rgb(250, 250, 250)",
        "bottomColor": "rgb(234, 234, 234)",
        "pressedTopColor": "rgb(255, 255, 255)",
        "pressedBottomColor": "rgb(255, 255, 255)",
        "overTopColor": "rgb(234, 234, 234)",
        "overBottomColor": "rgb(214, 214, 214)",
        "disabledTopColor": "rgb(211, 211, 211)",
        "disabledBottomColor": "rgb(211, 211, 211)",
        "airID": 1,
        "elementPanel": "designer",
        "elementType": "element"
      },
      "triggers": {
        "mousePressed": [
          {
            "sourceTrigger": "mousePressed",
            "sourceValue": "Static",
            "targetValue": "execute",
            "sourceStaticValue": "",
            "arguments": {
              "mapping": {
                "value": ""
              },
              "targetOrder": [
                "value"
              ],
              "sourceOrder": []
            },
            "targetName": "setBlinking"
          }
        ]
      },
      "zindex": 1,
      "designer": {
        "x": 10,
        "y": 121
      }
    },
    "setZooming": {
      "type": "Function",
      "properties": {
        "code": "\n\tcurrentAnimation = &zooming;\n\t",
        "length": "128",
        "inputType": "void",
        "returnType": "void",
        "permission": "public",
        "airID": 2,
        "elementPanel": "designer",
        "elementType": "element",
        "airName": "setZooming"
      },
      "triggers": {},
      "zindex": 2,
      "designer": {
        "x": 148,
        "y": 35
      }
    },
    "setBlinking": {
      "type": "Function",
      "properties": {
        "code": "\n\tcurrentAnimation = &redGreenBlueBlinking;\n\t",
        "length": "128",
        "inputType": "void",
        "returnType": "void",
        "permission": "public",
        "airID": 3,
        "elementPanel": "designer",
        "elementType": "element",
        "airName": "setBlinking"
      },
      "triggers": {},
      "zindex": 3,
      "designer": {
        "x": 134,
        "y": 143
      }
    }
  },
  "cloudElements": {}
}