{
  "header": {
    "data": {
      "order": [
        "Globals",
        "Interval",
        "Connected",
        "Disconnected",
        "Setup"
      ],
      "Globals": {
        "name": "Globals",
        "func": "#include \"callbacks.h\"",
        "code": "#include \"devicelpm.h\"\n\nunsigned int count = 0;\nbool bleConnected = false;\n\n\nvoid Gpio_ISR_Function_P2(void)\n{\n\tAIR_UART_Print(\"Detected P2 event\\n\\r\");\n}\n\nvoid Gpio_ISR_Function_P3(void)\n{\n\tAIR_UART_Print(\"Detected P3 event\\n\\r\");\n}\n\nvoid Gpio_ISR_Function_P4(void)\n{\n\tAIR_UART_Print(\"Detected P4 event\\n\\r\");\n}\n\nvoid Gpio_ISR_Function_P39(void) // timer event (not an actual GPIO pin)\n{\n    gpio_clearPinInterruptStatus(39/16, 39%16);\n    AIR_UART_Print(\"Detected timer wakeup event\\n\\r\");\n}\n\n\nvoid Gpio_ISR_P2(void)\n{\n\t// Switch debounce\n\tAIR_GENERIC_UDelay(2000);\n\tif (gpio_getPinInput(2/16, 2%16) == 0) Gpio_ISR_Function_P2();\n\n\t// clear interrupt flag\n\tgpio_clearPinInterruptStatus(2/16, 2%16);\n}\n\nvoid Gpio_ISR_P3(void)\n{\n\t// Switch debounce\n\tAIR_GENERIC_UDelay(2000);\n\tif (gpio_getPinInput(3/16, 3%16) == 0) Gpio_ISR_Function_P3();\n\n\t// clear interrupt flag\n\tgpio_clearPinInterruptStatus(3/16, 3%16);\n}\n\nvoid Gpio_ISR_P4(void)\n{\n\t// Switch debounce\n\tAIR_GENERIC_UDelay(2000);\n\tif (gpio_getPinInput(4/16, 4%16) == 0) Gpio_ISR_Function_P4();\n\n\t// clear interrupt flag\n\tgpio_clearPinInterruptStatus(4/16, 4%16);\n}\n\n",
        "close": "//END"
      },
      "Interval": {
        "name": "Interval",
        "func": "\nvoid interval() {",
        "code": "\n\t// Toggle LED\n\tAIR_GPIO_Write(13, !AIR_GPIO_Read(13));\n\n\t// Enter deep sleep after 15 seconds\n\tif (++count > 15)\n\t{\n\t\tcount = 0;\n\n        if (!bleConnected)\n        {\n    \t\tAIR_GPIO_Write(13, 0);\n    \t\tAIR_GPIO_Write(26, 0);\n    \t\tAIR_GPIO_Write(27, 0);\n    \n    \t\tchar buf[50];\n    \t\tsprintf(buf, \"Going to deep sleep now ...\\n\\r\");\n    \t\tAIR_UART_SynchronousWrite(buf, strlen(buf));\n    \n    // \t\tAIR_POWER_SetMode(AIR_POWER_DEEPSLEEP);\n            AIR_POWER_SetMode(AIR_POWER_OFF);\n        }\n\t}\n",
        "close": "}"
      },
      "Connected": {
        "name": "Connected",
        "func": "\nvoid connected() {",
        "code": "    bleConnected = true;\n",
        "close": "}"
      },
      "Disconnected": {
        "name": "Disconnected",
        "func": "\nvoid disconnected() {",
        "code": "    bleConnected = false;\n    count = 0;\n",
        "close": "}"
      },
      "Setup": {
        "name": "Setup",
        "func": "\nvoid setup() {",
        "code": "\tUINT16 gpioEvent;\n\n\t// Store which GPIO caused waking up from deep sleep\n    if (mia_getKeepstate0() & 0x01)\n    {\n    \tmia_setKeepstate0(0x00);\n\n     \tif (gpio_getPinInterruptStatus(2/16, 2%16)) mia_setKeepstate1(2);\n     \tif (gpio_getPinInterruptStatus(3/16, 3%16)) mia_setKeepstate1(3);\n     \tif (gpio_getPinInterruptStatus(4/16, 4%16)) mia_setKeepstate1(4);\n     \tif (gpio_getPinInterruptStatus(39/16, 39%16)) mia_setKeepstate1(39);\n\n\t\tAIR_POWER_Reset();\n    }\n\n    gpioEvent = mia_getKeepstate1();\n\n\n    AIR_GPIO_Init();\n \tAIR_POWER_Init();\n \tAIR_UART_Init();\n\tAIR_I2C_Init();\n \tAIR_SPI_Init();\n\tAIR_POWER_SetMode(AIR_POWER_SLEEP);\n\tAIR_POWER_SetDeepSleepInterval(5000);\n\n\t// Configure LED pins\n\tAIR_GPIO_SetMode(13, AIR_GPIO_OUTPUT_PUSH_PULL);\n\tAIR_GPIO_SetMode(26, AIR_GPIO_OUTPUT_PUSH_PULL);\n\tAIR_GPIO_SetMode(27, AIR_GPIO_OUTPUT_PUSH_PULL);\n    AIR_GPIO_Write(13, 0);\n    AIR_GPIO_Write(26, 0);\n    AIR_GPIO_Write(27, 0);\n\n\t// configure GPIO interrupts\n\tAIR_GPIO_SetMode(2, AIR_GPIO_INPUT_PULL_UP);\n\tAIR_GPIO_SetMode(3, AIR_GPIO_INPUT_PULL_UP);\n\tAIR_GPIO_SetMode(4, AIR_GPIO_INPUT_PULL_UP);\n \tAIR_GPIO_RegisterInterrupt(2, Gpio_ISR_P2, AIR_GPIO_TRIGGER_FALLING_EDGE);\n\tAIR_GPIO_RegisterInterrupt(3, Gpio_ISR_P3, AIR_GPIO_TRIGGER_FALLING_EDGE);\n\tAIR_GPIO_RegisterInterrupt(4, Gpio_ISR_P4, AIR_GPIO_TRIGGER_FALLING_EDGE);\n\n\t// configure unused GPIO\n\tAIR_GPIO_SetMode(0, AIR_GPIO_INPUT_PULL_UP);\n\tAIR_GPIO_SetMode(14, AIR_GPIO_OUTPUT_PUSH_PULL);\n\n\n \tdevlpm_enableWakeFrom(DEV_LPM_WAKE_SOURCE_GPIO);\n\n    // Manually run the GPIO functions if we woke via GPIO event\n    switch (gpioEvent)\n    {\n    \tcase 2:\t\tGpio_ISR_Function_P2();\n    \t\t\t\tbreak;\n    \tcase 3:\t\tGpio_ISR_Function_P3();\n    \t\t\t\tbreak;\n    \tcase 4:\t\tGpio_ISR_Function_P4();\n    \t\t\t\tbreak;\n    \tcase 39:\tGpio_ISR_Function_P39();\n    \t\t\t\tbreak;\n    \tdefault:\tbreak;\n    }\n\n \tAIR_UART_Print(\"Setup function complete\\n\\r\");\n\t",
        "close": "}"
      }
    },
    "boardConfiguration": {
      "ble": {
        "name": "Bluetooth Low Energy",
        "file": "ble_config.h",
        "values": {
          "localName": {
            "name": "Local Name",
            "input": "TextField",
            "prefix": "#define BLE_LOCAL_NAME \"",
            "value": "SleepTst",
            "suffix": "\"",
            "regex": "^[a-zA-Z0-9_.]*$"
          },
          "version": {
            "name": "Version",
            "input": "TextField",
            "prefix": "#define BLE_VERSION \"",
            "value": "1.00",
            "suffix": "\"",
            "regex": "^[a-zA-Z0-9_.]*$"
          },
          "ota": {
            "name": "Over the Air Updating (Default: OTA)",
            "input": "Combo",
            "prefix": "#define BLE_",
            "options": [
              "OTA",
              "NO_OTA"
            ],
            "value": "OTA",
            "regex": "^[a-zA-Z0-9_.]*$"
          },
          "pairing": {
            "name": "Pairing (Default: NONE)",
            "input": "Combo",
            "prefix": "#define ",
            "options": [
              "BLE_PAIRING_NONE",
              "BLE_PAIRING_PASSKEY"
            ],
            "value": "BLE_PAIRING_NONE",
            "regex": "^[a-zA-Z0-9_.]*$"
          },
          "txPowerLevel": {
            "name": "TX Power Level (dbm) (Default: 4)",
            "input": "TextField",
            "prefix": "#define BLE_TX_POWER_LEVEL ",
            "value": "4",
            "regex": "^-?[0-9]d{0,2}(.d*)?$"
          },
          "advPowerLevel": {
            "name": "Advertising TX Power Level (dbm) (Default: 4)",
            "input": "TextField",
            "prefix": "#define ADV_BLE_TX_POWER_LEVEL ",
            "value": "4",
            "regex": "^-?[0-9]d{0,2}(.d*)?$"
          },
          "intervalFineTimer": {
            "name": "Interval Timer Length (ms) (Default: 1000)",
            "input": "Combo",
            "prefix": "#define BLE_INTERVAL_FINE_TIMER ",
            "options": [
              "12.5",
              "25",
              "50",
              "62.5",
              "75",
              "87.5",
              "100",
              "125",
              "137.5",
              "162.5",
              "200",
              "250",
              "325",
              "500",
              "1000"
            ],
            "value": "1000",
            "regex": "^[a-zA-Z0-9_.]*$"
          },
          "minInterval": {
            "name": "BLE Min Interval (ms) (Default: 20)",
            "input": "TextField",
            "prefix": "#define BLE_INTERVAL_MIN ",
            "value": "20",
            "regex": "^[0-9]*$"
          },
          "maxInterval": {
            "name": "BLE Max Interval (ms) (Default: 40)",
            "input": "TextField",
            "prefix": "#define BLE_INTERVAL_MAX ",
            "value": "40",
            "regex": "^[0-9]*$"
          },
          "slaveLatency": {
            "name": "BLE Slave Latency (ms) (Default: 0)",
            "input": "TextField",
            "prefix": "#define BLE_SLAVE_LATENCY ",
            "value": "0",
            "regex": "^[0-9]*$"
          },
          "timeout": {
            "name": "BLE Connection Timeout (ms) (Default: 700)",
            "input": "TextField",
            "prefix": "#define BLE_CONNECTION_TIMEOUT ",
            "value": "700",
            "regex": "^[0-9]*$"
          }
        }
      },
      "power": {
        "name": "Power Driver",
        "file": "power_config.h",
        "values": {
          "external_osc": {
            "name": "External Oscillator (Default: INTERNAL)",
            "input": "Combo",
            "prefix": "#define AIR_POWER_",
            "options": [
              "EXTERNAL_32KHZ_OSC",
              "INTERNAL_OSC"
            ],
            "value": "INTERNAL_OSC",
            "regex": "^[a-zA-Z0-9_.]*$"
          }
        }
      },
      "gpio": {
        "name": "GPIO Driver",
        "file": "gpio_config.h",
        "values": {
          "buad": {
            "name": "ADC Sample Frequency (Default: LOW)",
            "input": "Combo",
            "prefix": "#define AIR_ADC_SAMPLE_FREQUENCY ",
            "options": [
              "ADC_SAMPLE_FREQUENCY_LOW",
              "ADC_SAMPLE_FREQUENCY_MEDIUM_LOW",
              "ADC_SAMPLE_FREQUENCY_MEDIUM",
              "ADC_SAMPLE_FREQUENCY_MEDIUM_HIGH",
              "ADC_SAMPLE_FREQUENCY_HIGH"
            ],
            "value": "ADC_SAMPLE_FREQUENCY_LOW",
            "regex": "^[a-zA-Z0-9_.]*$"
          },
          "pwmClockSource": {
            "name": "PWM Clock Source (Default: PMU)",
            "input": "Combo",
            "prefix": "#define AIR_PWM_CLOCK_SOURCE ",
            "options": [
              "PMU_CLK",
              "LHL_CLK"
            ],
            "value": "PMU_CLK",
            "regex": "^[a-zA-Z0-9_.]*$"
          }
        }
      },
      "uart": {
        "name": "UART Driver",
        "file": "uart_config.h",
        "values": {
          "rxBuffer": {
            "name": "RX Circular Buffer size (Default: 128)",
            "input": "TextField",
            "prefix": "#define AIR_UART_RX_CIRCULAR_BUFFER_SIZE ",
            "value": "128",
            "regex": "^[0-9]*$"
          },
          "txBuffer": {
            "name": "TX Circular Buffer size (Default: 128)",
            "input": "TextField",
            "prefix": "#define AIR_UART_TX_CIRCULAR_BUFFER_SIZE ",
            "value": "128",
            "regex": "^[0-9]*$"
          },
          "buad": {
            "name": "Baudrate (Default: 115200)",
            "input": "Combo",
            "prefix": "#define ",
            "options": [
              "AIR_UART_BAUD_460800",
              "AIR_UART_BAUD_230400",
              "AIR_UART_BAUD_115200",
              "AIR_UART_BAUD_57600",
              "AIR_UART_BAUD_38400",
              "AIR_UART_BAUD_19200",
              "AIR_UART_BAUD_9600"
            ],
            "value": "AIR_UART_BAUD_115200",
            "regex": "^[a-zA-Z0-9_.]*$"
          },
          "txPin": {
            "name": "TX Pin (Default: 32)",
            "input": "Combo",
            "prefix": "#define AIR_UART_TX_PIN ",
            "options": [
              "32"
            ],
            "value": "32",
            "regex": "^[a-zA-Z0-9_.]*$"
          },
          "rxPin": {
            "name": "RX Pin (Default: 33)",
            "input": "Combo",
            "prefix": "#define AIR_UART_RX_PIN ",
            "options": [
              "33"
            ],
            "value": "33",
            "regex": "^[a-zA-Z0-9_.]*$"
          },
          "rtsPin": {
            "name": "RTS Pin (Default: 1)",
            "input": "Combo",
            "prefix": "#define AIR_UART_RTS_PIN ",
            "options": [
              "1"
            ],
            "value": "1",
            "regex": "^[a-zA-Z0-9_.]*$"
          },
          "ctsPin": {
            "name": "CTS Pin (Default: 3)",
            "input": "Combo",
            "prefix": "#define AIR_UART_CTS_PIN ",
            "options": [
              "3"
            ],
            "value": "3",
            "regex": "^[a-zA-Z0-9_.]*$"
          }
        }
      },
      "spi": {
        "name": "SPI Driver",
        "file": "spi_config.h",
        "values": {
          "speed": {
            "name": "SPI Speed (Default: 1000000)",
            "input": "Combo",
            "prefix": "#define AIR_SPI_SPEED ",
            "options": [
              "1000000",
              "500000"
            ],
            "value": "1000000",
            "regex": "^[a-zA-Z0-9_.]*$"
          },
          "mode": {
            "name": "SPI Mode (Default: SPI_MODE_3)",
            "input": "Combo",
            "prefix": "#define AIR_SPI_MODE ",
            "options": [
              "SPI_MODE_0",
              "SPI_MODE_1",
              "SPI_MODE_2",
              "SPI_MODE_3"
            ],
            "value": "SPI_MODE_3",
            "regex": "^[a-zA-Z0-9_.]*$"
          }
        }
      },
      "buzzer": {
        "name": "Buzzer Driver",
        "file": "buzzer_config.h",
        "values": {
          "pin": {
            "name": "Buzzer Pin (Default: 14)",
            "input": "Combo",
            "prefix": "#define BUZZER_PWM_PIN ",
            "options": [
              "13",
              "14",
              "26",
              "27"
            ],
            "value": "14",
            "regex": "^[a-zA-Z0-9_.]*$"
          }
        }
      }
    },
    "meta": {
      "version": "2.0.1",
      "layoutGrid": false,
      "layoutSnapping": false,
      "layoutSnappingSize": 10,
      "cloudLayoutGrid": false,
      "cloudLayoutSnapping": false,
      "cloudLayoutSnappingSize": 10,
      "language": "en",
      "enableTooltips": true,
      "enableAutoSave": true,
      "enableBuildSave": false,
      "description": null,
      "project_uuid": null,
      "tokensEnabled": false,
      "codeAssist": false,
      "highlightLine": false,
      "editorTheme": "Default",
      "editorFontSize": 12,
      "customEmbeddedElementLibraries": {},
      "theme": {},
      "projectType": "bcm20737",
      "name": "DeepSleep_MSDB"
    },
    "type": "Header",
    "currentLayoutName": "Default",
    "currentCloudLayoutName": "Default"
  },
  "layouts": {
    "Default": {
      "name": "Default (768x1024)",
      "width": 768,
      "height": 1024,
      "orientation": "portrait",
      "devicename": ".*",
      "platform": "",
      "version": ".*",
      "elements": {}
    }
  },
  "cloudLayouts": {
    "Default": {
      "name": "Default (600x400)",
      "width": 600,
      "height": 400,
      "orientation": "landscape",
      "devicename": ".*",
      "platform": "",
      "version": ".*",
      "elements": {}
    }
  },
  "elements": {},
  "cloudElements": {}
}